<!-- 搜索遮罩框 -->
<%- theme.CDN.Materialize.js %>
<style>
  /*搜索层样式*/
  #searchIcon {
    font-size: 1.2rem;
  }

  #searchModal {
    min-height: 500px;
    width: 80%;
  }

  #searchModal .search-header .title {
    font-size: 1.6rem;
    color: #333;
  }

  #searchResult {
    margin: -15px 0 10px 10px;
  }

  #searchResult .search-result-list {
    margin-left: -8px;
    padding-left: 0;
    color: #666;
  }

  .search-result-list .search-result-title {
    font-size: 1.4rem;
    color: #42b983;
  }

  .search-result-list li {
    border-bottom: 1px solid #e5e5e5;
    padding: 15px 0 5px 0;
  }

  .search-result-list .search-keyword {
    margin: 0 2px;
    padding: 1px 5px 1px 4px;
    border-radius: 2px;
    background-color: #f2f2f2;
    color: #e96900;
    font-style: normal;
    white-space: pre-wrap;
  }

  .modal {
    display: none;
    position: fixed;
    left: 0;
    right: 0;
    background-color: #fafafa;
    padding: 0;
    max-height: 70%;
    width: 55%;
    margin: auto;
    overflow-y: auto;
    border-radius: 2px;
    will-change: top, opacity;
  }

  .modal:focus {
    outline: none;
  }

  @media only screen and (max-width: 992px) {
    .modal {
      width: 80%;
    }
  }

  .modal h1,
  .modal h2,
  .modal h3,
  .modal h4 {
    margin-top: 0;
  }

  .modal .modal-content {
    padding: 24px;
  }

  .modal .modal-close {
    cursor: pointer;
  }

  .modal .modal-footer {
    border-radius: 0 0 2px 2px;
    background-color: #fafafa;
    padding: 4px 6px;
    height: 56px;
    width: 100%;
    text-align: right;
  }

  .modal .modal-footer .btn,
  .modal .modal-footer .btn-large,
  .modal .modal-footer .btn-small,
  .modal .modal-footer .btn-flat {
    margin: 6px 0;
  }

  .modal-overlay {
    position: fixed;
    z-index: 999;
    top: -25%;
    left: 0;
    bottom: 0;
    right: 0;
    height: 125%;
    width: 100%;
    background: #000;
    display: none;
    will-change: opacity;
  }

  .modal.modal-fixed-footer {
    padding: 0;
    height: 70%;
  }

  .modal.modal-fixed-footer .modal-content {
    position: absolute;
    height: calc(100% - 56px);
    max-height: 100%;
    width: 100%;
    overflow-y: auto;
  }

  .modal.modal-fixed-footer .modal-footer {
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    position: absolute;
    bottom: 0;
  }

  .modal.bottom-sheet {
    top: auto;
    bottom: -100%;
    margin: 0;
    width: 100%;
    max-height: 45%;
    border-radius: 0;
    will-change: bottom, opacity;
  }
</style>
<div id="searchModal" class="modal">
  <div class="modal-content">
    <div class="search-header">
      <span class="title"
        ><i class="fas fa-search"></i>&nbsp;&nbsp;<%= __('search') %></span
      >
      <input
        type="search"
        id="searchInput"
        name="s"
        placeholder="<%= __('searchTip') %>"
        class="search-input"
      />
    </div>
    <div id="searchResult"></div>
  </div>
</div>

<script type="text/javascript">
  $(function () {
    var searchFunc = function (path, search_id, content_id) {
      "use strict";
      $.ajax({
        url: path,
        dataType: "xml",
        success: function (xmlResponse) {
          // get the contents from search data
          var datas = $("entry", xmlResponse)
            .map(function () {
              return {
                title: $("title", this).text(),
                content: $("content", this).text(),
                url: $("url", this).text(),
              };
            })
            .get();
          var $input = document.getElementById(search_id);
          var $resultContent = document.getElementById(content_id);
          $input.addEventListener("input", function () {
            var str = '<ul class="search-result-list">';
            var keywords = this.value
              .trim()
              .toLowerCase()
              .split(/[\s\-]+/);
            $resultContent.innerHTML = "";
            if (this.value.trim().length <= 0) {
              return;
            }
            // perform local searching
            datas.forEach(function (data) {
              var isMatch = true;
              var data_title = data.title.trim().toLowerCase();
              var data_content = data.content
                .trim()
                .replace(/<[^>]+>/g, "")
                .toLowerCase();
              var data_url = data.url;
              data_url =
                data_url.indexOf("/") === 0 ? data.url : "/" + data_url;
              var index_title = -1;
              var index_content = -1;
              var first_occur = -1;
              // only match artiles with not empty titles and contents
              if (data_title !== "" && data_content !== "") {
                keywords.forEach(function (keyword, i) {
                  index_title = data_title.indexOf(keyword);
                  index_content = data_content.indexOf(keyword);
                  if (index_title < 0 && index_content < 0) {
                    isMatch = false;
                  } else {
                    if (index_content < 0) {
                      index_content = 0;
                    }
                    if (i === 0) {
                      first_occur = index_content;
                    }
                  }
                });
              }
              // show search results
              if (isMatch) {
                str +=
                  "<li><a href='" +
                  data_url +
                  "' class='search-result-title'>" +
                  data_title +
                  "</a>";
                var content = data.content.trim().replace(/<[^>]+>/g, "");
                if (first_occur >= 0) {
                  // cut out 100 characters
                  var start = first_occur - 20;
                  var end = first_occur + 80;
                  if (start < 0) {
                    start = 0;
                  }
                  if (start === 0) {
                    end = 100;
                  }
                  if (end > content.length) {
                    end = content.length;
                  }
                  var match_content = content.substr(start, end);
                  // highlight all keywords
                  keywords.forEach(function (keyword) {
                    var regS = new RegExp(keyword, "gi");
                    match_content = match_content.replace(
                      regS,
                      '<em class="search-keyword">' + keyword + "</em>"
                    );
                  });

                  str +=
                    '<p class="search-result">' + match_content + "...</p>";
                }
                str += "</li>";
              }
            });
            str += "</ul>";
            $resultContent.innerHTML = str;
          });
        },
      });
    };

    searchFunc('<%- url_for("/search.xml") %>', "searchInput", "searchResult");
  });
  $(".modal").modal();
</script>
